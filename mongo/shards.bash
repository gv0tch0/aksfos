#!/usr/bin/env bash
# creates data directories for, spawns and
# organizes the necessary mongo processes
# for the requested number of shards (each
# with the requesyed number of nodes).
# all of that is done in the local machine
# and helps with spawning a mongo sharded
# cluster.
#
# prerequisites:
#  - bash 4+
#  - mongo executables are on the path
#  - ports {1..<shards>}000{0..<nodes>}
#    are available to be bound to

#set -x
set -e

#globals
data_root=
num_shards=
nodes_per_shard=
mongoc_port=25070
mongos_port=25071
shards_cfg="shards.js"
sleep_secs=3
medium_sleep_secs=20
long_sleep_secs=60
declare -A shards

#echoes the usage info
function usage() {
    me=`basename $0`
    echo "usage: ${me} [num-of-shards] [nodes-per-shard] [data-root]"
    echo "  [num-shards]      (required) the number of mongo shards. valid range: [2,6]"
    echo "  [nodes-per-shard] (required) the number of nodes in each shard's replica set."
    echo "                    valid range: [2,7]. in case of an even number of nodes an"
    echo "                    extra arbiter-only mongod process will be spawned to break"
    echo "                    the primary election votes ties."
    echo "  [data-root]       (required) the directory that hosts the mongo data for each"
    echo "                    node in each replica set."
}

#echos the first argument that was passed to it
#removing the trailing slash if any
function trim_trailing_slash() {
    regex="^(.*)/$"
    if [[ $1 =~ $regex ]]; then
        echo ${BASH_REMATCH[1]}
    else
        echo $1
    fi
}

#grabs the number of shards and the number
#of nodes in the shard replica set from the
#command line
function process_args() {
    if [ $# -ne 3 ]; then
        echo "ERROR: i need three arguments to run."
        usage
        exit 1
    else
        num_shards=$1
        if [ ${num_shards} -lt 2 ] || [ ${num_shards} -gt 6 ]; then
            echo "ERROR: the number of shards '${num_shards}' is outside of the valid range."
            usage
            exit 1
        fi
        nodes_per_shard=$2
        if [ ${nodes_per_shard} -lt 2 ] || [ ${nodes_per_shard} -gt 7 ]; then
            echo "ERROR: the number of nodes per shard replica set '${nodes_per_shard}' is outside of the valid range."
            usage
            exit 1
        fi
        data_root=`trim_trailing_slash $3`
        echo "will create '${num_shards}' shards with '${nodes_per_shard}' nodes in each replica set (an arbiter will be"
        echo "added if the nodes are even). the data will be hosted under the '${data_root}' directory."
    fi
}

#generates the mongo replica set config file for
#the shard at the globally set shard_num
function generate_rset_config() {
    local rset_file=rset${shard_num}.js
    if [ -e ${rset_file} ]; then
        echo "WARNING: the mongo replica set configuration file '${rset_file}' exists and will be overwritten."
        echo "         its contents are:"
        cat ${rset_file}
        echo "         <end of existing '${rset_file}' contents>"
    fi

    local last_node_idx=-1
    let "last_node_idx = ${nodes_per_shard} - 1"

    echo "config = { _id: \"rs_${shard_num}\", members: [" > ${rset_file}
    for ((node = 0; node < ${nodes_per_shard}; node++))
    do
        node_cfg="{_id: ${node}, host: \"127.0.0.1:${port_prefix}000${node}\"}"
        if [ ${node} -lt ${last_node_idx} ] || [ $(( ${nodes_per_shard} % 2 )) -eq 0 ]; then
            node_cfg="${node_cfg},"
        fi
        echo ${node_cfg} >> ${rset_file}
    done
    if [ $(( ${nodes_per_shard} % 2 )) -eq 0 ]; then
        echo "{_id: ${node}, host: \"127.0.0.1:${port_prefix}000${nodes_per_shard}\", arbiterOnly: true}" >> ${rset_file}
    fi
    echo "]}" >> ${rset_file}

    echo "rs.initiate(config)" >> ${rset_file}
}

function generate_shards_cfg() {
    if [ -e ${shards_cfg} ]; then
        echo "WARNING: the mongo shards configuration file '${shards_cfg}' exists and will be overwritten."
        echo "         its contents are:"
        cat ${shards_cfg}
        echo "         <end of existing '${shards_cfg}' contents>"
    fi
    echo "//generated by `basename $0` at `date`" > ${shards_cfg}
    for key in ${!shards[@]}; do
        echo "db.runCommand({addshard: \"${key}/${shards[${key}]}\"})" >> ${shards_cfg}
    done
}

process_args "$@"

#start the replica set for each shard
for ((shard_num = 0; shard_num < ${num_shards}; shard_num++))
do
    let "port_prefix = ${shard_num} + 1"

    rsetid=rs_${shard_num}

    for ((node = 0; node < ${nodes_per_shard}; node++))
    do
        data_dir=${data_root}/${rsetid}/node${node}
        log_file=${data_dir}/mongod.log
        port=${port_prefix}000${node}
        mkdir -p ${data_dir}
        mongod --fork --logpath ${log_file} --port ${port} --replSet ${rsetid} --dbpath ${data_dir}
        if [ ${node} -gt 0 ]; then
            shards[${rsetid}]+=","
        fi
        shards[${rsetid}]+="127.0.0.1:${port}"
    done

    #spawn an arbiter only mongod process if we otherwise would
    #end up with an even number of nodes
    if [ $(( ${nodes_per_shard} % 2 )) -eq 0 ]; then
        data_dir=${data_root}/${rsetid}/arbiter
        log_file=${data_dir}/mongod.log
        port=${port_prefix}000${nodes_per_shard}
        mkdir -p ${data_dir}
        mongod --fork --logpath ${log_file} --port ${port} --replSet ${rsetid} --dbpath ${data_dir}
    fi

    generate_rset_config

    echo "letting the mongo processes start before applying the replica set configuration..."
    sleep ${sleep_secs} 
    mongo 127.0.0.1:${port_prefix}0000 rset${shard_num}.js
done

#start mongocfg -- this is the shard config server - one in dev (but need three in production)
mongoc_dir=${data_root}/config
mkdir -p ${mongoc_dir}
mongod --configsvr --fork --port ${mongoc_port} --logpath ${mongoc_dir}/mongod.log --dbpath ${mongoc_dir}

#start mongos -- this is the router that the application needs to connect to
echo "letting the mongo config process start before trying to start the mongo sharding router..."
sleep ${long_sleep_secs}
mongos --fork --port ${mongos_port} --configdb 127.0.0.1:${mongoc_port} --logpath ${mongoc_dir}/mongos.log

#generate and apply the jscript that configures the replica sets as shards
generate_shards_cfg
echo "letting the mongo sharding router start before applying the sharding configuration..."
sleep ${medium_sleep_secs} 
mongo 127.0.0.1:${mongos_port}/admin ${shards_cfg}

#config shards
#in mongos' admin db:
# to validate shards have been added correctly:
#     db.getSiblingDB("config").shards.find() 'or' db.runCommand({listshards: 1})
# for each db that we want to enable collection sharding for:
#   db.runCommand({enablesharding: "<db-name>"}))
#   to validate:
#     db.getSiblingDB("config").databases.find())
# for each collection we want to shard:
#   db.runCommand({shardcollection: "<db-name>.<collection-name>", key: {<shard-key-fields>}})
#   and to validate:
#     db.getSiblingDB("config").collections.find()
 
